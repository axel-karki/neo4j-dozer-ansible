- name: Update apt package index
  ansible.builtin.apt:
    update_cache: yes

- name: Install prerequisites
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Create keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download and add Docker GPG key
  ansible.builtin.shell: |
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg
  args:
    creates: /etc/apt/keyrings/docker.gpg

- name: Get system architecture
  ansible.builtin.command: dpkg --print-architecture
  register: system_arch
  changed_when: false

- name: Get Debian codename
  ansible.builtin.command: lsb_release -cs
  register: debian_codename
  changed_when: false

- name: Remove any existing Docker repository files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/apt/sources.list.d/docker.list
    - /etc/apt/sources.list.d/docker.sources

- name: Add Docker APT repository
  ansible.builtin.apt_repository:
    repo: >
      deb [arch={{ system_arch.stdout }} signed-by=/etc/apt/keyrings/docker.gpg]
      https://download.docker.com/linux/debian {{ debian_codename.stdout }} stable
    state: present
    filename: docker

- name: Update apt package index after adding Docker repo
  ansible.builtin.apt:
    update_cache: yes

- name: Install Docker engine and CLI tools
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present

- name: Add current user to docker group (optional)
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  when: ansible_user != "root"

- name: Ensure Docker service is started and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes

- name: Verify Docker installation
  ansible.builtin.command: docker --version
  register: docker_version
  changed_when: false

- name: Display Docker version
  ansible.builtin.debug:
    msg: "Docker installed successfully: {{ docker_version.stdout }}"

- name: Check if Neo4j container is running
  shell: docker ps --format '{{"{{"}}.Names{{"}}"}}' | grep -w neo4j
  register: neo4j_running
  ignore_errors: true # avoids stopping the play if grep fails (expected when the container is not running).

- name: Run Neo4j Docker container with DozerDB if not already running (detached mode added)
  ansible.builtin.shell: |
    docker run \
            -d \
            -p7474:7474 -p7687:7687 \
            -v $HOME/neo4j/data:/data \
            -v $HOME/neo4j/logs:/logs \
            -v $HOME/neo4j/import:/var/lib/neo4j/import \
            -v $HOME/neo4j/plugins:/plugins \
            --env NEO4J_AUTH=neo4j/"{{ neo4j_password }}" \
            --env NEO4J_PLUGINS='["apoc"]' \
            --env NEO4J_apoc_export_file_enabled=true \
            --env NEO4J_apoc_import_file_enabled=true \
            --env NEO4J_dbms_security_procedures_unrestricted='*' \
            graphstack/dozerdb:5.26.3.0
  args:
    executable: /bin/bash
  when: neo4j_running.rc != 0
